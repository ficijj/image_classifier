# -*- coding: utf-8 -*-
"""Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VeKuqpj64zAEL5gIRjhpeO-S9ISnsTJC
"""

import os
import numpy as np
from matplotlib import pyplot as plt
import copy
from copy import deepcopy
import tensorflow as tf
from tensorflow.keras import datasets, layers, models

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
train_images, test_images = train_images / 255.0, test_images / 255.0

print(train_images.shape)
print(test_images.shape)
print(np.unique(train_labels))

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10, 10))
for i in range(25):
  plt.subplot(5, 5, i + 1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i], cmap=plt.cm.binary)
  plt.xlabel(class_names[train_labels[i][0]])
plt.show()

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

model.summary()

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
trained = model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))
val_loss, val_acc = model.evaluate(test_images, test_labels)
print('og accuracy:',val_acc)

new_train_images = copy.deepcopy(train_images)

new_fliplr_images = np.empty_like(new_train_images)
new_flipud_images = np.empty_like(new_train_images)
for i in range(new_train_images.shape[0]):
  new_fliplr_images[i] = np.fliplr(new_train_images[i])
  new_flipud_images[i] = np.flipud(new_train_images[i])

aug_train_images = np.concatenate((new_train_images, new_fliplr_images, new_flipud_images), axis=0)
print(aug_train_images.shape)

aug_train_labels = np.concatenate((train_labels, train_labels, train_labels), axis=0)
print(aug_train_labels.shape)

plt.figure(figsize=(10, 10))
for i in range(3):
  plt.subplot(1, 3, i + 1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  if i == 0:
    plt.imshow(new_train_images[0], cmap=plt.cm.binary)
    plt.xlabel('og')
  elif i == 1:
    plt.imshow(new_fliplr_images[0], cmap=plt.cm.binary)
    plt.xlabel('flipped left to right')
  else:
    plt.imshow(new_flipud_images[0], cmap=plt.cm.binary)
    plt.xlabel('flipped top to bottom')

plt.show()

aug_model = models.Sequential()
aug_model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
aug_model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))
aug_model.add(layers.MaxPooling2D((2, 2)))
aug_model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))
aug_model.add(layers.MaxPooling2D((2, 2)))
aug_model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))
aug_model.add(layers.Flatten())
aug_model.add(layers.Dense(64, activation='relu'))
aug_model.add(layers.Dense(10))

aug_model.summary()

aug_model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
aug_trained = aug_model.fit(aug_train_images, aug_train_labels, epochs=10, validation_data=(test_images, test_labels))
val_loss, val_acc = aug_model.evaluate(test_images, test_labels)
print('augmented accuracy:',val_acc)

drop_model = models.Sequential()
drop_model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
drop_model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))
drop_model.add(layers.Dropout(0.3))
drop_model.add(layers.MaxPooling2D((2, 2)))
drop_model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))
drop_model.add(layers.MaxPooling2D((2, 2)))
drop_model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))
drop_model.add(layers.Dropout(0.2))
drop_model.add(layers.Flatten())
drop_model.add(layers.Dense(64, activation='relu'))
drop_model.add(layers.Dense(10))

drop_model.summary()

drop_model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
trained_drop = drop_model.fit(aug_train_images, aug_train_labels, epochs=10, validation_data=(test_images, test_labels))
val_loss, val_acc = drop_model.evaluate(test_images, test_labels)
print('dropout accuracy:',val_acc)